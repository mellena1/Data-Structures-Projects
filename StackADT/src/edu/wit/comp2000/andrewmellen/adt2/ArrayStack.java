package edu.wit.comp2000.andrewmellen.adt2;import java.util.EmptyStackException;/** A class of stacks whose entries are stored in an array.    @author Frank M. Carrano and Timothy M. Henry    @version 4.0        @author Andrew Mellen    @dueDate October 11, 2016    @assignment Lab 2 - Stack ADT    @class COMP2000-3fa */public class ArrayStack<T> implements StackInterface<T>{	private T[] stack;    // Array of stack entries	private int topIndex; // Index of top entry	private static final int DEFAULT_CAPACITY = 50;	private static final int MAX_CAPACITY = 10000;  		//----------------------------CONSTRUCTORS:----------------------------------------		/** Creates an ArrayStack */	public ArrayStack()	{		this(DEFAULT_CAPACITY);	} // end default constructor		/** Creates an ArrayStack with a chosen init capacity of the array	 * @param initialCapacity  initial capacity of array */	public ArrayStack(int initialCapacity)	{		boolean initCapOK = checkCapacity(initialCapacity);      		// The cast is safe because the new array contains null entries		@SuppressWarnings("unchecked")		T[] tempStack = (T[])new Object[initCapOK ? initialCapacity : MAX_CAPACITY];		stack = tempStack;		topIndex = stack.length;	} // end constructor		//-----------------------------TESTER METHODS:--------------------------------------		/** main method to test the ADT */	public static void main(String[] args){		testPush();		System.out.println("");		testPop();		System.out.println("");		testPeek();		System.out.println("");		testIsEmpty();		System.out.println("");		testClear();		System.out.println("");		testCheckCapacity();		System.out.println("");		testIsArrayFull();		System.out.println("");		testPushException();		System.out.println("");		testPopException();	} //end main		/** method to test pushing objects to a stack */	private static void testPush(){		ArrayStack<String> stack = new ArrayStack<>();		System.out.println("PUSH \"hi\" then \"hello\" to stack: ");		stack.push("hi");		System.out.println(stack);		stack.push("hello");		System.out.println(stack);	} //end testPush		/** method to test popping objects from the stack */	private static void testPop(){		ArrayStack<String> stack = new ArrayStack<>();		System.out.println("POP \"hello\" then \"hi\" from stack: ");		stack.push("hi");		stack.push("hello");		System.out.println(stack);		System.out.println("pop 1: " + stack.pop());		System.out.println("pop 2: " + stack.pop());	} //end testPop		/** method to test peeking objects from the stack */	private static void testPeek(){		ArrayStack<String> stack = new ArrayStack<>();		System.out.println("PEEK \"hi\" from stack: ");		stack.push("hi");		System.out.println(stack.peek());		System.out.println(stack);	} //end testPeek		/** method to test the isEmpty method */	private static void testIsEmpty(){		ArrayStack<String> stack = new ArrayStack<>();		System.out.println("ISEMPTY no elements: ");		System.out.println("Empty?: " + stack.isEmpty());		stack.push("jfhkajfs");		System.out.println(stack);		System.out.println("Empty?: " + stack.isEmpty());		stack.pop();		System.out.println(stack);		System.out.println("Empty?: " + stack.isEmpty());	} //end testIsEmpty		/** method to test the clear method */	private static void testClear(){		ArrayStack<String> stack = new ArrayStack<>();		System.out.println("CLEAR: ");		System.out.println(stack);		stack.push("hi");		stack.push("hello");		stack.push("bonjour");		System.out.println(stack);		stack.clear();		System.out.println("CLEARED: \n" + stack);	} //end testClear		/** method to test the checkCapacity method */	private static void testCheckCapacity(){		ArrayStack<String> stack1 = new ArrayStack<>(MAX_CAPACITY+1);		ArrayStack<String> stack2 = new ArrayStack<>(4444);		System.out.println("CHECKCAPACITY(1): Is array.length same as MAX_CAPACITY?: " + 											(stack1.getSize() == MAX_CAPACITY));		System.out.println("CHECKCAPACITY(2): Is array.length same as 4444?: " + 				(stack2.getSize() == 4444));	} // end testCheckCapacity		/** method to test the isArrayFull method and making a new array */	private static void testIsArrayFull(){		ArrayStack<String> stack = new ArrayStack<>();		System.out.println("ISARRAYFULL stack size: " + stack.getSize() + "\n" + stack								+ "\nNumber of elements: " + stack.getNumberOfElements());		for(int x = 0; x < 2000; x++){			stack.push("hello");		}		System.out.println("ISARRAYFULL After adding 2000 elements: \nstack size: " + stack.getSize()								+ "\nNumber of elements: " + stack.getNumberOfElements());	} //end testIsArrayFull		/** method to test the exception in the push method */	private static void testPushException(){		ArrayStack<String> stack = new ArrayStack<>();		//Push too much		try{			for(int x = 0; x < MAX_CAPACITY + 1; x++){				stack.push("Too much");			}		}catch(IllegalStateException ex){			System.out.println("ILLEGALSTATEEXCEPTION: Pushed too much");		}	} //end testPushException		/** method to test the exception in the pop method */	private static void testPopException(){		ArrayStack<String> stack = new ArrayStack<>();		//Pop off an empty stack		try{			stack.pop();		}catch(EmptyStackException ex){			System.out.println("EMPTYSTACKEXCEPTION: Popped too much");		}	} //end testPopException			//------------------------PUBLIC METHODS:--------------------------------		/** Adds a new entry to the top of this stack.   	@param newEntry  An object to be added to the stack. */	@Override	public void push(T newEntry) {		if(isArrayFull()){			throw new IllegalStateException("Can't push any more items, stack is full");		}		topIndex--;		stack[topIndex] = newEntry;	} //end push	/** Removes and returns this stack's top entry.   	@return  The object at the top of the stack.    	@throws  EmptyStackException if the stack is empty before the operation. */	@Override	public T pop() {		if(isEmpty()){			throw new EmptyStackException();		}		T returnT = stack[topIndex]; //Object to return		stack[topIndex] = null; //delete from array		topIndex++;		return returnT;	} //end pop	/** Retrieves this stack's top entry.   	@return The object at the top of the stack.   	@throws EmptyStackException if the stack is empty. */	@Override	public T peek() {		if(isEmpty()){			throw new EmptyStackException();		}		return stack[topIndex];	}	/** Detects whether this stack is empty.   	@return  True if the stack is empty. */	@Override	public boolean isEmpty() {		return topIndex == stack.length;	} //end isEmpty	/** Removes all entries from this stack. */	@Override	public void clear() {		for(int x = 0; x < stack.length; x++){			stack[x] = null;		}		topIndex = stack.length;	} //end clear		/** @return number of elements on stack */	public int getNumberOfElements(){		return stack.length - topIndex;	} //end getNumberOfElements		/** @return String of all elements in the stack */	@Override	public String toString(){		String toReturn = "STACK:\n{\nNumber of elements: " + getNumberOfElements() + 								"\nStack elements:\n";		if(isEmpty())			return "Stack is empty.";		for(int x = topIndex; x < stack.length; x++)			toReturn = toReturn + "~ "+ stack[x] + "\n";		return toReturn.substring(0, toReturn.length() - 1) + "\n}"; //remove last \n	} //end toString   		//---------------------PRIVATE METHODS:-----------------------------------------   	/** Make sure capacity < MAX_CAPACITY	 * @param capacity  size you are trying to make array of	 * @return true if capacity is allowed (<MAX_CAPACITY) */	private boolean checkCapacity(int capacity){		return capacity < MAX_CAPACITY ;	} //end checkCapacity   	/** Check to see if the stack array needs to be made bigger	 * @return true if array is full of MAX_CAPACITY */	private boolean isArrayFull(){		if(topIndex != 0){ //Array still has more room			return false;		}		//Array is full:		int newArraySize = stack.length * 2;		if(!checkCapacity(newArraySize)){ //length*2 is too big, try to max it out			if(stack.length == MAX_CAPACITY){ //Array is full at Max Capacity				return true;			}			else{				newArraySize = MAX_CAPACITY;			}		}		makeNewArray(newArraySize);		return false;	} //end isArrayFull		/** Makes a new array in the given size	 * @param newArraySize  size of new array being made */	private void makeNewArray(int newArraySize){		// The cast is safe because the new array contains null entries		@SuppressWarnings("unchecked")		T[] tempArray = (T[])new Object[newArraySize];		System.arraycopy(stack, 0, tempArray, tempArray.length - stack.length, stack.length);		topIndex = tempArray.length - stack.length; //set new top index		stack = tempArray;	}//end makeNewArray		/** @return size of array in stack */	private int getSize(){		return stack.length;	} //end getSize} // end ArrayStack